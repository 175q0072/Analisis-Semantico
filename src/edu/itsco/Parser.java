/* Generated By:JavaCC: Do not edit this line. Parser.java */
package edu.itsco;
import java.util.List;
import java.util.ArrayList;

public class Parser implements ParserConstants {
  public static List<Variable> variables;

  public static void main(String args []) throws ParseException, SemanticException
  {
    variables = new ArrayList<Variable>();
    Parser parser = new Parser(System.in);
   System.out.println ("bienvenidos al COMPILADOR");
   System.out.println ("----------------------------------------------");
   Parser.principal();
   System.out.println ("EL PROGRAMA SE COMPILO CORRECTAMENTE");

  }

    public static void addVariable(Variable v) throws
    SemanticException{
    if(!variables.contains(v)){
        variables.add(v);
    }else{
        throw new SemanticException(v.getId(),
            SemanticException.VARIABLE_DUPLICADA);
    }
  }

  public static void variableExiste(Variable v) throws
    SemanticException{
     if(!variables.contains(v)){
        throw new SemanticException(v.getId(),
            SemanticException.VARIABLE_NO_DEFINIDA);
     }
  }

  public static void tipoDeDato(Variable v, String tipoDato)
  throws SemanticException{
      Variable vBuscar = variables.get(variables.indexOf(v));
      if(!vBuscar.getTipoDato().equals(tipoDato))
        throw new SemanticException(v.getId(),
            SemanticException.TIPOS_NO_COINCIDEN);

  }

  public static void noInicializada(Variable v)
   throws SemanticException {
    Variable vBuscar = variables.get(variables.indexOf(v));
    if(!vBuscar.isInicializada()) {
                throw new SemanticException(v.getId(),
                SemanticException.VARIABLE_NO_INICIALIZADA);
      }
  }

  static final public void principal() throws ParseException, SemanticException {
    jj_consume_token(INICIO);
    jj_consume_token(ID);
    sentencias();
    jj_consume_token(FIN);
  }

  static final public void sentencias() throws ParseException, SemanticException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
        gramaticaImprimir();
        break;
      case VAR:
        declararVariable();
        break;
      case INPUT:
        gramaticaLeer();
        break;
      case IF:
        gramaticaIf();
        break;
      case WHILE:
        gramaticaWhile();
        break;
      case ID:
        gramaticaAsignacion();
        break;
      case FOR:
        gramaticaFor();
        break;
      case SELECT:
        gramaticaSelect();
        break;
      case DO:
        gramaticaDo();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case PRINT:
      case INPUT:
      case IF:
      case SELECT:
      case FOR:
      case WHILE:
      case DO:
      case ID:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
  }

//Gramaticas
  static final public void gramaticaImprimir() throws ParseException, SemanticException {
  Token id;
    jj_consume_token(PRINT);
    jj_consume_token(AP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VALOR_INT:
    case VALOR_FLOAT:
    case VALOR_STRING:
      valor();
      break;
    case ID:
      id = jj_consume_token(ID);
                Variable v= new Variable();
                v.setId(id.image);
                variableExiste(v);
                noInicializada(v);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUM:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(SUM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VALOR_INT:
      case VALOR_FLOAT:
      case VALOR_STRING:
        valor();
        break;
      case ID:
        jj_consume_token(ID);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(CP);
  }

  static final public void declararVariable() throws ParseException, SemanticException {
  Token id;
  String tipoDatoValor;
  String tipoDatoVariable;
    jj_consume_token(VAR);
    id = jj_consume_token(ID);
    tipoDatoVariable = TipoDato();
                        Variable v= new Variable();
                        v.setId(id.image);
                        v.setTipoDato(tipoDatoVariable);
                        addVariable(v);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      tipoDatoValor = valor();
                tipoDeDato(v, tipoDatoValor);
                        v.setInicializada(true);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  static final public void gramaticaLeer() throws ParseException, SemanticException {
  Token id;
  String tipoDatoVariable;
    jj_consume_token(INPUT);
    jj_consume_token(AP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      id = jj_consume_token(ID);
                Variable v= new Variable();
                v.setId(id.image);
                variableExiste(v);
      break;
    case VALOR_INT:
    case VALOR_FLOAT:
    case VALOR_STRING:
      valor();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CP);
  }

  static final public void gramaticaAsignacion() throws ParseException, SemanticException {
  Token id;
  String tipoDatoOperacion="";
    id = jj_consume_token(ID);
    jj_consume_token(IGUAL);
    tipoDatoOperacion = operacion();
     Variable v=new Variable();
     v.setId(id.image);
     variableExiste(v);
     tipoDeDato(v, tipoDatoOperacion);
     variables.get(variables.indexOf(v)).setInicializada(true);
  }

  static final public void gramaticaIf() throws ParseException, SemanticException {
    jj_consume_token(IF);
    jj_consume_token(AP);
    condicion();
    jj_consume_token(CP);
    jj_consume_token(ENTONCES);
    sentencias();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      sentencias();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(FIN);
    jj_consume_token(IF);
  }

  static final public void gramaticaSelect() throws ParseException, SemanticException {
  Token id;
    jj_consume_token(SELECT);
    jj_consume_token(AP);
    id = jj_consume_token(ID);
    jj_consume_token(CP);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHEN:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(WHEN);
      jj_consume_token(VALOR_INT);
      jj_consume_token(ENTONCES);
      sentencias();
      jj_consume_token(BREAK);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PREDETERMINADO:
      jj_consume_token(PREDETERMINADO);
      jj_consume_token(ENTONCES);
      sentencias();
      jj_consume_token(BREAK);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(FIN);
    jj_consume_token(SELECT);
    Variable v= new Variable();
    v.setId(id.image);
    variableExiste(v);
    noInicializada(v);
    if(v.getTipoDato()!="int") {
                {if (true) throw new SemanticException(v.getId(),
            SemanticException.TIPOS_NO_COINCIDEN);}
      }
  }

  static final public void gramaticaFor() throws ParseException, SemanticException {
    jj_consume_token(FOR);
    jj_consume_token(ID);
    jj_consume_token(IGUAL);
    jj_consume_token(VALOR_INT);
    jj_consume_token(TO);
    jj_consume_token(VALOR_INT);
    jj_consume_token(ENTONCES);
    sentencias();
    jj_consume_token(NEXT);
  }

  static final public void gramaticaWhile() throws ParseException, SemanticException {
    jj_consume_token(WHILE);
    jj_consume_token(AP);
    condicion();
    jj_consume_token(CP);
    jj_consume_token(ENTONCES);
    sentencias();
    jj_consume_token(FIN);
    jj_consume_token(WHILE);
  }

  static final public void gramaticaDo() throws ParseException, SemanticException {
    jj_consume_token(DO);
    jj_consume_token(ENTONCES);
    sentencias();
    jj_consume_token(FIN);
    jj_consume_token(WHILE);
    jj_consume_token(AP);
    condicion();
    jj_consume_token(CP);
  }

//cosas
  static final public String TipoDato() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
           {if (true) return "int";}
      break;
    case STRING:
      jj_consume_token(STRING);
                                        {if (true) return "string";}
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
                                                                       {if (true) return "float";}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String valor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VALOR_STRING:
      jj_consume_token(VALOR_STRING);
                    {if (true) return "string";}
      break;
    case VALOR_INT:
      jj_consume_token(VALOR_INT);
                                                        {if (true) return "int";}
      break;
    case VALOR_FLOAT:
      jj_consume_token(VALOR_FLOAT);
                                                                                          {if (true) return "float";}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String operacion() throws ParseException, SemanticException {
        Token id1;
        Token id2;
        String tipoDatoResultado="";
        String tipoDatoOp="";
        Token operadorAritmetico;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VALOR_INT:
    case VALOR_FLOAT:
    case VALOR_STRING:
      tipoDatoResultado = valor();
      break;
    case ID:
      id1 = jj_consume_token(ID);
                Variable v=new Variable();
                v.setId(id1.image);
                variableExiste(v);
                noInicializada(v);
                tipoDatoResultado=variables.get(variables.indexOf(v)).getTipoDato();
      break;
    case AP:
      tipoDatoResultado = opParentesis();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUM:
      case REST:
      case MULT:
      case DIV:
      case MOD:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
      operadorAritmetico = opAritmetico();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VALOR_INT:
      case VALOR_FLOAT:
      case VALOR_STRING:
        tipoDatoOp = valor();
        break;
      case ID:
        id2 = jj_consume_token(ID);
                Variable v = new Variable();
                v.setId(id2.image);
                variableExiste(v);
                noInicializada(v);
                tipoDatoOp=variables.get(variables.indexOf(v)).getTipoDato();
        break;
      case AP:
        tipoDatoOp = opParentesis();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  if(operadorAritmetico.image!="+" && tipoDatoResultado=="string" && tipoDatoOp=="string" ) {
                        {if (true) throw new SemanticException("",
            SemanticException.OPERACION_NO_VALIDA);}
                    }
                   else if(tipoDatoResultado=="string" && tipoDatoOp!="string") {
                     {if (true) throw new SemanticException("",
            SemanticException.OPERACION_NO_VALIDA);}
                     }
                   else if(tipoDatoResultado!="string" && tipoDatoOp=="string") {
                     {if (true) throw new SemanticException("",
            SemanticException.OPERACION_NO_VALIDA);}
                     }
    }
      {if (true) return tipoDatoResultado;}
    throw new Error("Missing return statement in function");
  }

  static final public String opParentesis() throws ParseException, SemanticException {
   String tipoDatoResultado="";
    jj_consume_token(AP);
    tipoDatoResultado = operacion();
    jj_consume_token(CP);
      {if (true) return tipoDatoResultado;}
    throw new Error("Missing return statement in function");
  }

  static final public Token opAritmetico() throws ParseException {
                      Token op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUM:
      op = jj_consume_token(SUM);
              {if (true) return op;}
      break;
    case REST:
      op = jj_consume_token(REST);
                                       {if (true) return op;}
      break;
    case MULT:
      op = jj_consume_token(MULT);
                                                              {if (true) return op;}
      break;
    case DIV:
      op = jj_consume_token(DIV);
                                                                                       {if (true) return op;}
      break;
    case MOD:
      op = jj_consume_token(MOD);
                                                                                                              {if (true) return op;}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void condicion() throws ParseException, SemanticException {
    condicionSimple();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
      case NOT:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
      opLogico();
      condicionSimple();
    }
  }

  static final public void opLogico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      break;
    case OR:
      jj_consume_token(OR);
      break;
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void condicionSimple() throws ParseException, SemanticException {
  Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VALOR_INT:
    case VALOR_FLOAT:
    case VALOR_STRING:
      valor();
      break;
    case ID:
      id = jj_consume_token(ID);
                Variable v=new Variable();
                v.setId(id.image);
                variableExiste(v);
                noInicializada(v);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    opRelacional();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VALOR_INT:
    case VALOR_FLOAT:
    case VALOR_STRING:
      valor();
      break;
    case ID:
      id = jj_consume_token(ID);
                Variable v=new Variable();
                v.setId(id.image);
                variableExiste(v);
                noInicializada(v);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void opRelacional() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAYOR:
      jj_consume_token(MAYOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
        jj_consume_token(IGUAL);
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      break;
    case MENOR:
      jj_consume_token(MENOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
        jj_consume_token(IGUAL);
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      break;
    case IGUAL:
      jj_consume_token(IGUAL);
      jj_consume_token(IGUAL);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3113880,0x3113880,0x0,0x4000000,0x0,0x0,0x0,0x8000,0x20000,0x40000,0x700,0x0,0x0,0x7c000000,0x0,0x7c000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8000,0x8000,0xf000,0x0,0xf000,0x1,0xf000,0x0,0x0,0x0,0x0,0x7000,0xf040,0x0,0xf040,0x0,0x38,0x38,0xf000,0xf000,0x1,0x1,0x7,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
