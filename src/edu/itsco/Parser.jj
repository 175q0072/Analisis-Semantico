/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  LOOKAHEAD = 1;
  static = true;
}

PARSER_BEGIN(Parser)
package edu.itsco;
import java.util.List;
import java.util.ArrayList;

public class Parser
{
  public static List<Variable> variables;
  
  public static void main(String args []) throws ParseException, SemanticException
  {
    variables = new ArrayList<Variable>();
    Parser parser = new Parser(System.in);
   System.out.println ("bienvenidos al COMPILADOR");
   System.out.println ("----------------------------------------------");
   Parser.principal();
   System.out.println ("EL PROGRAMA SE COMPILO CORRECTAMENTE");
    
  }

    public static void addVariable(Variable v) throws
    SemanticException{
    if(!variables.contains(v)){
        variables.add(v);
    }else{
        throw new SemanticException(v.getId(),
            SemanticException.VARIABLE_DUPLICADA);
    }
  }

  public static void variableExiste(Variable v) throws
    SemanticException{
     if(!variables.contains(v)){
        throw new SemanticException(v.getId(),
            SemanticException.VARIABLE_NO_DEFINIDA);
     }
  }

  public static void tipoDeDato(Variable v, String tipoDato)
  throws SemanticException{
      Variable vBuscar = variables.get(variables.indexOf(v));
      if(!vBuscar.getTipoDato().equals(tipoDato))
        throw new SemanticException(v.getId(),
            SemanticException.TIPOS_NO_COINCIDEN);
  
  }

  public static void noInicializada(Variable v)
   throws SemanticException {
    Variable vBuscar = variables.get(variables.indexOf(v));
    if(!vBuscar.isInicializada()) {
		throw new SemanticException(v.getId(),
		SemanticException.VARIABLE_NO_INICIALIZADA);
      }
  }
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN: {
  < INICIO : "program" >
| < FIN : "end" >
| < VAR : "var" >
| < INT : "int" >
| < STRING : "string" >
| < FLOAT : "float" > 
 
| < PRINT : "print" >
| < INPUT : "input" > 
 
| < IF : "if" >
| < ENTONCES : ":" >
| < ELSE : "else" > 

| <SELECT: "select" >
| < WHEN: "when">
| < PREDETERMINADO: "default" >
| < BREAK: "break" >

| < FOR : "for" >
| < IN : "in" >
| < TO: "to" >
| < NEXT: "next" >
 
 
| < WHILE : "while" >
| < DO : "do">  
}
TOKEN:{

< SUM : "+" >
| < REST : "-" >
| < MULT : "*" >
| < DIV : "/" >
| < MOD : "%" >
| < POT : "^" >
| < IGUAL: "="> 
 
| < MAYOR : ">" >
| < MENOR : "<" > 
 
| < AND : "&&" >
| < OR : "||" >
| < NOT : "!" > 
 
| < AP: "(" >
| < CP: ")" >
| < AC: "[" >
| < CC: "]"> 
}
TOKEN:{
 <#digito: ["0"-"9"] >
 | <#letra: ["a"-"z","A"-"Z"] > 

 | <VALOR_INT: (<digito >)+ >
 | <VALOR_FLOAT: (< digito >)+"."(< digito >)+ >
 | <VALOR_STRING:("\'" (~["\'"])+ "\'") | ("\"" (~["\""])+ "\"") >  
 
| <ID: ("_" | <letra >) ("_"|<letra >|<digito >)* >
} 

void principal () throws SemanticException: {}
{
   <INICIO> <ID> 
        sentencias()
    <FIN> 
}
void sentencias() throws SemanticException:{
}{
    (   gramaticaImprimir()
        |declararVariable()
        |gramaticaLeer()
        |gramaticaIf()
        |gramaticaWhile()
        |gramaticaAsignacion()
        |gramaticaFor()
        |gramaticaSelect()
        |gramaticaDo()
        
    )+    
}



//Gramaticas

void gramaticaImprimir() throws SemanticException: {
  Token id;}
{
  <PRINT> <AP> ( valor()| id= <ID> {
		Variable v= new Variable();
		v.setId(id.image);
		variableExiste(v);
		noInicializada(v);
		
    } )
        (<SUM> (valor() | <ID>))*
    <CP>
} 


void declararVariable() throws SemanticException: {
  Token id;
  String tipoDatoValor;
  String tipoDatoVariable;
 }
{
    < VAR >  id= <ID> tipoDatoVariable= TipoDato() {
			Variable v= new Variable();
			v.setId(id.image);
			v.setTipoDato(tipoDatoVariable);
			addVariable(v);
			}
			
        [ <IGUAL > tipoDatoValor=valor() {
          	tipoDeDato(v, tipoDatoValor);
			v.setInicializada(true);
       }] 
}


void gramaticaLeer() throws SemanticException:{
  Token id;
  String tipoDatoVariable;
}{
    <INPUT> <AP> (id=<ID>   {
		Variable v= new Variable();
		v.setId(id.image);
		variableExiste(v);
		
     }|valor()) 
           <CP>
    
}
void gramaticaAsignacion() throws SemanticException:{
  Token id;
  String tipoDatoOperacion="";
}{
   id= <ID> <IGUAL> tipoDatoOperacion=operacion()
   {
     Variable v=new Variable();
     v.setId(id.image);
     variableExiste(v);
     tipoDeDato(v, tipoDatoOperacion);
     variables.get(variables.indexOf(v)).setInicializada(true);

    }
   
}

void gramaticaIf() throws SemanticException:{}
{
    <IF> <AP> condicion() <CP> <ENTONCES>
        sentencias()
    [<ELSE> sentencias()]
    <FIN> <IF>
}

void gramaticaSelect() throws SemanticException: {
  Token id;
}
{
  < SELECT > <AP > id=<ID > <CP >
  ( <WHEN > <VALOR_INT > <ENTONCES > sentencias() < BREAK > )*
  [<PREDETERMINADO ><ENTONCES > sentencias() < BREAK>]
  < FIN > < SELECT >
  {
    Variable v= new Variable();
    v.setId(id.image);
    variableExiste(v);
    noInicializada(v);
    if(v.getTipoDato()!="int") {
		throw new SemanticException(v.getId(),
            SemanticException.TIPOS_NO_COINCIDEN);
      }
    
  }
}

void gramaticaFor() throws SemanticException:{
}{
    <FOR> <ID> <IGUAL> <VALOR_INT> <TO> <VALOR_INT>  <ENTONCES >
        sentencias()
    <NEXT>
}
void gramaticaWhile() throws SemanticException: { }
{
	< WHILE> <AP> condicion() <CP> <ENTONCES >
        sentencias()
    <FIN> <WHILE>
}

void gramaticaDo() throws SemanticException: { }
{
  < DO > <ENTONCES >
  sentencias()
  < FIN >< WHILE > <AP > condicion()< CP >
} 



//cosas
String TipoDato(): { }
{
  < INT > {return "int"; } | < STRING >{return "string"; } | < FLOAT >{return "float"; }

}

String valor(): { }
{
  < VALOR_STRING > {return "string"; } | < VALOR_INT > {return "int";}| < VALOR_FLOAT > { return "float";}
}
 
String operacion() throws SemanticException:{
	Token id1;
	Token id2;
	String tipoDatoResultado="";
	String tipoDatoOp="";
	Token operadorAritmetico;
  }
{
    ( tipoDatoResultado = valor()
    | id1=<ID> {
		Variable v=new Variable();
		v.setId(id1.image);
		variableExiste(v);
		noInicializada(v);
		tipoDatoResultado=variables.get(variables.indexOf(v)).getTipoDato();
      }
    | tipoDatoResultado=opParentesis() )
    
    (operadorAritmetico= opAritmetico() (tipoDatoOp=valor()
    | id2=<ID> {
		Variable v = new Variable();
		v.setId(id2.image);
		variableExiste(v);
		noInicializada(v);
		tipoDatoOp=variables.get(variables.indexOf(v)).getTipoDato();
      }
    | tipoDatoOp=opParentesis())
		{
		  if(operadorAritmetico.image!="+" && tipoDatoResultado=="string" && tipoDatoOp=="string" ) {
			throw new SemanticException("",
            SemanticException.OPERACION_NO_VALIDA);
		    }
		   else if(tipoDatoResultado=="string" && tipoDatoOp!="string") {
		     throw new SemanticException("",
            SemanticException.OPERACION_NO_VALIDA);
		     }
		   else if(tipoDatoResultado!="string" && tipoDatoOp=="string") {
		     throw new SemanticException("",
            SemanticException.OPERACION_NO_VALIDA);
		     }
		}
    )*
    { return tipoDatoResultado;}
}
       
 String opParentesis() throws SemanticException:{
   String tipoDatoResultado="";
}{
    <AP> tipoDatoResultado=operacion() <CP>
    { return tipoDatoResultado;}
}

Token opAritmetico():{Token op;}
{
   op= <SUM> {return op; }| op=<REST> {return op; }|op=<MULT>{return op; } | op=<DIV> {return op; }|op= <MOD>{return op; }
}


void condicion() throws SemanticException:{
}{
    condicionSimple() (opLogico() condicionSimple())* 
}

void opLogico():{
}{
    <AND> | <OR> |< NOT >
}

void condicionSimple() throws SemanticException:{
  Token id;
}{
   ( valor() | id=<ID> {
		Variable v=new Variable();
		v.setId(id.image);
		variableExiste(v);
		noInicializada(v);
     }
    ) opRelacional() ( valor()|id=<ID> {
		Variable v=new Variable();
		v.setId(id.image);
		variableExiste(v);
		noInicializada(v);
     } )
}

void opRelacional():{
}{
    <MAYOR>[<IGUAL>] | <MENOR>[<IGUAL>] | <IGUAL><IGUAL>
}
